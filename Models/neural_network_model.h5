import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import joblib

def train_and_evaluate_nn():
    # Load the dataset
    data = pd.read_csv('data/stock_prices.csv')
    
    # Feature Engineering
    data['SMA_5'] = data['Close'].rolling(window=5).mean()
    data['SMA_20'] = data['Close'].rolling(window=20).mean()
    data.dropna(inplace=True)
    
    # Features and target variable
    X = data[['SMA_5', 'SMA_20']]
    y = data['Close'].shift(-1).fillna(data['Close'].mean())  # Predict next day's close price
    
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Standardize the data
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # Build the Neural Network
    model = Sequential([
        Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'),
        Dense(32, activation='relu'),
        Dense(1)  # Single output for regression
    ])
    
    # Compile the model
    model.compile(optimizer=Adam(learning_rate=0.001), loss='mse', metrics=['mae'])
    
    # Train the model
    model.fit(X_train_scaled, y_train, epochs=50, batch_size=16, validation_data=(X_test_scaled, y_test), verbose=1)
    
    # Evaluate the model
    predictions = model.predict(X_test_scaled)
    mse = mean_squared_error(y_test, predictions)
    print(f"Neural Network Model Mean Squared Error: {mse:.2f}")
    
    # Save the model and scaler
    model.save('models/neural_network_model.h5')
    joblib.dump(scaler, 'models/scaler.pkl')
    print("Model and scaler saved in the models/ directory.")

if __name__ == "__main__":
    train_and_evaluate_nn()
